ls - lsah                               ---> show the list of file with advance deail and size and also give hiden files to user

pwd                                     ---> to see path where you at
clear                                   ---> to clear all output
cd                                      ---> to change directory
cd ../..                                ---> to jump to the root folder
ls                                      ---> to see what folder contain
ls home                                 ---> to see specific view into folder 
-- help                                 ---> to get command with argument
echo                                    ---> give you the echo what you enter
which "program_name"                    ---> to find program path
ls -l                                   ---> give you the more deail information of list of file
ls -l -a                                ---> show you the hidden files
touch "file_name", ".file_name"         ---> to create file
ls --ignor "File_name"                  ---> to ignore file
cd ~                                    ---> to quick jump to the home folder
!!                                      ---> bang bang command re run the last command


Shortcuts 
ctrl + a                                ---> works like home
ctrl + e                                ---> works like end
ctrl + k                                ---> yank the after your coursor pointing to
ctrl + u                                ---> yank the before where you coursor pointing from
ctrl + y                                ---> pest that you yank before this command


Signals:
ctrl + c                                ---> sigint signal interrupt
ctrl + d                                ---> same as (ctrl+c) but more powerfull it force progeram to quit
yes                                     ---> Special program that give y to every question in installation

kill -l                                 ---> See all kill command form os decl with number to give in terminal as argument
SIGTERM                                 ---> Computer send this signal to all program to save and close let shutdown the Computer
SIGKILL                                 ---> kill (ASSASSINATE) the progeram Like: done with you amigo now stop
                                        // " As example use this command to create infinite yes in background that we see
                                        // early ( yes > /dev/null & ) then catch that task with this command so you can kill
                                        // after ( ps aux | grep yes )" -----    ---> "kill -9 process_id"

*******************************************************************************************************
Nano: editor
nano textfile.txt                       ---> To create the file name "textfile.txt" 
ctrl+o                                  ---> to save then enter
ctrl+x                                  ---> to exit and if ask hit enter
 
Vim: editor         
                                        ---> little thing take your too much time to exit but you can't if you dont know.
vim textfile.txt                        ---> to create file name "textfile.txt"
:q                                      ---> to quit the file
:q!                                     ---> to quit the file without saving
:qa!                                    ---> to force quit the file from terminal Like: abandon the ship we are drowning.
:w                                      ---> to save the file
i                                       ---> to go back to insert mode to write somthing into file
:wq                                     ---> to save and exit the file
:help tutor                             ---> to throu you to guid to learn from document of vim

Less: editor
less textfile.txt                       ---> to create
:q                                      ---> to quit
/                                       ---> write_that_you_wat_find
man less                                ---> for manual
***************************************************************************************************

cat textfile.txt                        ---> to see the file contain
tail textfile.txt                       ---> to see 10 last line
tail -n 15 textfile.txt                 ---> to view last specific 15 line (you can use in head)
head textfile.txt                       ---> to see 10 last line
echo >> hi                              ---> to add text into end of file
mkdir folder_name                       ---> to make new folder              
mkdir -p hi/my/name/is/vijay            ---> to make neshted directory
touch file_name                         ---> to create new file
rm file_name                            ---> to remove file
rm -r / rm -rf                          ---> to remove the file and folder / and with "rm -rf" to use force to delete, this will not 
        `                               // prompt you to delete all the file that contain 
                                        // normal delete will ask more and more to delete file that have information
rm -rf * or rm -rf /*           Danger  ---> delete full pc or importent file                                                       
cp file.txt destination file.tet        ---> copy file containt
mv                                      ---> move that rename file name or directory name


******************************************************************************************************
TAR  ---- like rar or zip
*****
tar -cf archive.tar vijaytest           ---> to make tar(file) to make file without compress
tar -zcf archive.tar.gz vijaytest       ---> to make compress tar file with gz extenstaion
tar -xzf archive.tar.gz -C mydata/      ---> to extrect tar file.

******************************************************************************************************

touch file(1,2,3,4).txt                 ---> like file1.txt file2.txt .... this is done by terminal program dose not support it it recive full command tht bash ar going to feed it to terminal.
1>                                      ---> to redirect output from screen to file(also work like copy)
1>>                                     ---> add new output to file was having somthing in it dose not overwrite any thing.
2>                                      ---> to send error to the file 
.                                       ---> to send output and erro both in same file
cat < file name                         ---> get the file data and give input as data

cat ls.txt | grep"ls-error.txt"         ---> give the output to another program like grap then it will give you output that have been filtered.
ps aux | grep "ps aux"                  ---> give the output to find the specific program
yes y | rm file*.txt                    ---> remove all file from folder
cat /etc/passwd                         ---> give all user account available to the computer with permisions
sudo useradd user_name                  ---> for adding new user with password
sudo chown ubuntu:ubuntu /hello         ---> for giveing access to the specific file
sudo chmod u=rw,g=rw,o=rw               ---> for giveing this file can use or modify it(you have to inside this directory)
sudo chmod 777 file.txt                 ---> for give read write and execute for user,group,other(everyone that mean 777)
sudo chmod 667 file.txt                 ---> read and write(user and group everyone else can execute)
700 only for ubuntu
600 only for user read and write
640 group read cant write 
sudo chmod +x my-new-program            ---> +x to add execution to file(-x to remove execution permision)
        +w/-w                           ---> for writing for user and group

printenv  ***IMP******                  ---> to see path varible thos have been set

sudo vi /etc/environment                ---> to set varible to all users
vi ~/.bashrc                            ---> to set the env varible to ubuntu
source ~./bashrc                        ---> to rerun the bashrc file

vi .bash_profile                        ---> to open bash bash_profile for making bashrc run always when session starts
                code :                  if[ -f ~/.bashrc ]; then 
                                                source ~/.bashrc
                                        fi

ps                                      ---> to see command process and its like cmd taskmanager
ps aux                                  ---> to see full pc task 
sleep 100                               ---> wait for 100 sec and finish the task 
jobs                                    ---> give you all jobs that are running or stoped in terminal
bg 1                                    ---> start that process in background
fg 1                                    ---> this command send you to the process that is executing
jobs -l                                 ---> take jobs id and display
echo $?                                 ---> to see the process is finish or not (finish=0 else ~values)
touch MYfile.txt && date >> MYfile.txt && uptime >> MYfile.txt ---> this will complete if previous process is finish
 